import { Stack } from '@chakra-ui/react'
import { collection, getDocs, limit, orderBy, query, where } from 'firebase/firestore'
import type { NextPage } from 'next'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import { useAuthState } from 'react-firebase-hooks/auth'
import { Post, PostVote } from '../atoms/postsAtom'
import CreatePostLink from '../components/Club/CreatePostLink'
import Recommendations from '../components/Club/Recommendations'
import PageContent from '../components/Layout/PageContent'
import PostItem from '../components/Posts/PostItem'
import PostLoader from '../components/Posts/PostLoader'
import { auth, firestore } from '../firebase/clientApp'
import useClubData from '../hooks/useClubData'
import usePosts from '../hooks/usePosts'

const Home: NextPage = () => {
  const [user,loadinguser]=useAuthState(auth);
  const [loading,setLoading]=useState(false);
  const {clubStateValue}=useClubData();
  const {postStateValue,setPostStateValue,onDeletePost,onSelectPost,onVote}=usePosts();

  const buildUserHomeFeed=async()=>{
    //fetch some posts from each community that user has joined.
    setLoading(true);
    try {
      if(clubStateValue.mySnippets.length){
        //get posts from user joined clubs
        const myClubIds=clubStateValue.mySnippets.map((snippet)=>snippet.clubId);
        const postQuery=query(collection(firestore,"posts"),where("clubId","in",myClubIds),limit(10));
        const postDocs= await getDocs(postQuery);
        const posts= postDocs.docs.map((doc)=>({id:doc.id,...doc.data()}))
        setPostStateValue((prev)=>({
          ...prev,
          posts:posts as Post[],
        }));
      }else{
        buildNoUserHomeFeed();
      }
    } catch (error) {
      console.log("buildUserHomeFeed error",error);
    }
    setLoading(false);
  }

  const buildNoUserHomeFeed= async ()=>{
    setLoading(true);
    try {
      const postQuery=query(collection(firestore,"posts"),orderBy("voteStatus","desc"),limit(10));
      const postDocs= await getDocs(postQuery);
      const posts = postDocs.docs.map((doc)=>({id:doc.id,...doc.data()}));
      setPostStateValue((prev)=>({
        ...prev,
        posts: posts as Post[],
      }))
    } catch (error) {
      console.log("buildNoUserHomeFeed error",error);
    }
    setLoading(false);
  };

  const getUserPostVotes=async()=>{
    try {
      const postIds=postStateValue.posts.map((post)=>post.id);
      const postVotesQuery=query(collection(firestore,`users/${user?.uid}/postVotes`),where("postId","in",postIds));
      const postVotesDoc= await getDocs(postVotesQuery);
      const postVotes=postVotesDoc.docs.map((doc)=>({id:doc.id,...doc.data()}));
      setPostStateValue((prev)=>({
        ...prev,
        postVotes:postVotes as PostVote[],
      }))
    } catch (error) {
      console.log("getPostVotes error",error);
    }
  }

  useEffect(()=>{
    if(!user && !loadinguser) buildNoUserHomeFeed();
  },[user,loadinguser])

  useEffect(()=>{
    if(clubStateValue.snippetsFetched) buildUserHomeFeed();
  },[clubStateValue.snippetsFetched])

  useEffect(()=>{
    if(user && postStateValue.posts.length) getUserPostVotes();
    //cleanUp for postVotes
    return ()=>{
      setPostStateValue((prev)=>({
        ...prev,
        postVotes:[],
      }))
    }
  },[user,postStateValue.posts])

  return (
    <>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageContent>
        <>
          <CreatePostLink/>
          {loading ? (
            <PostLoader/>
          ):(
            <Stack>
              {postStateValue.posts.map((post)=>(
                <PostItem 
                  key={post.id} 
                  post={post}
                  onDeletePost={onDeletePost} 
                  onSelectPost={onSelectPost} 
                  onVote={onVote}
                  userIsCreator={user?.uid===post.creatorId}
                  userVoteValue={postStateValue.postVotes.find((item)=>item.postId===post.id)?.voteValue}
                  homePage
                />
              ))}
            </Stack>
          )}
        </>
        <>  
          <Recommendations/>
        </>
      </PageContent>
    </>
  )
}

export default Home
